@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using System.Linq

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<input class="form-control mb-2" placeholder="Search" @oninput="@Input" />

<button class="btn btn-primary me-2" @onclick="() => FilterWarmDays(15)">≥ 15°C</button>
<button class="btn btn-secondary" @onclick="Restore">Restore</button>

@if (filteredForecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table mt-3">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in filteredForecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
    <p>Number of warm days (≥ 15°C): @warmDaysCount</p>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? filteredForecasts;
    private int warmDaysCount;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // symulacja ładowania

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-30,45),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        filteredForecasts = forecasts.ToArray();
        warmDaysCount = forecasts.Count(f => f.TemperatureC >= 15);
    }

    private void FilterWarmDays(int minTemp)
    {
        if (forecasts != null)
        {
            filteredForecasts = forecasts
                .Where(f => f.TemperatureC >= minTemp)
                .ToArray();
        }
    }

    private void Restore()
    {
        if (forecasts != null)
        {
            filteredForecasts = forecasts.ToArray();
        }
    }

    private void Input(ChangeEventArgs e)
    {
        var text = e.Value?.ToString() ?? "";
        filteredForecasts = forecasts?
            .Where(f => f.Summary?.Contains(text, StringComparison.OrdinalIgnoreCase) == true)
            .ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
